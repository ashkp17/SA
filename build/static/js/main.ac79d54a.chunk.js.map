{"version":3,"sources":["components/App.jsx","index.js"],"names":["redundant","App","generateEmptyGrid","rows","i","push","Array","from","useState","grid","setGrid","Simulation","setSimulation","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","onClick","style","display","flexDirection","justifyContent","Math","random","generateRandomStuff","gridTemplateColumns","map","col","className","newGrid","key","width","height","background","undefined","textAlign","marginLeft","marginRight","maxWidth","backgroundColor","ReactDOM","render","document","getElementById"],"mappings":"4LAMMA,EAAY,CAChB,CAAC,IACD,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IA8JQC,MA3Jf,WACE,IAAMC,EAAoB,WAExB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAjBJ,GAiBiBA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAjBX,KAiB2B,kBAAM,MAE7C,OAAOH,GAGT,EAAwBK,oBAAS,WAC/B,OAAON,OADT,mBAAOO,EAAP,KAAaC,EAAb,KAcA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAGhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBhB,GACP,IAF4B,eAEnBiB,GACP,IAAIC,EAAY,EAChBtB,EAAUuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACtBC,EAAOtB,EAAIoB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKC,GAAQ,GAAKD,EAtD5B,IAsD8CC,EArD9C,KAsDAL,GAAaJ,EAAEQ,GAAMC,OAGrBL,EAAY,GAAKA,EAAY,EAC/BF,EAAShB,GAAGiB,GAAK,EACI,IAAZH,EAAEd,GAAGiB,IAA0B,IAAdC,IAC1BF,EAAShB,GAAGiB,GAAK,IAZZA,EAAI,EAAGA,EAhDV,GAgDuBA,IAAM,EAA1BA,IADFjB,EAAI,EAAGA,EAhDR,GAgDqBA,IAAM,EAA1BA,SAmBbwB,WAAWZ,EAAe,QACzB,IAEH,OACE,oCACE,4BACEa,QAAS,WACPjB,GAAeD,GACVA,IACHE,EAAWE,SAAU,EACrBC,OAIHL,EAAa,OAAS,QATzB,eAWA,yBACEmB,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,eAAgB,WAGlB,4BACEJ,QAAS,WACPnB,EAAQR,OAFZ,SAOA,4BACE2B,QAAS,WACPnB,EAxEkB,WAE1B,IADA,IAAMP,EAAO,GACJC,EAAI,EAAGA,EA7BJ,GA6BiBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MA9BH,KA8BmB,kBAAO4B,KAAKC,SAAW,GAAM,EAAI,MAGhE,OAAOhC,EAiESiC,MAFZ,iBAQF,yBACEN,MAAO,CACLC,QAAS,OACTE,eAAgB,SAChBI,oBAAoB,UAAD,OA5Gb,GA4Ga,aAGpB5B,EAAK6B,KAAI,SAACnC,EAAMC,GAAP,OACRD,EAAKmC,KAAI,SAACC,EAAKlB,GAAN,OACP,yBACEmB,UAAU,QACVX,QAAS,WACP,IAAMY,EAAUtB,YAAQV,GAAM,SAACW,GAC7BA,EAAShB,GAAGiB,GAAKZ,EAAKL,GAAGiB,GAAK,EAAI,KAEpCX,EAAQ+B,IAEVC,IAAG,UAAKtC,EAAL,YAAUiB,GACbS,MAAO,CACLa,MAAO,GACPC,OAAQ,GACRC,WAAYpC,EAAKL,GAAGiB,GAAK,YAASyB,YAM5C,yBAAKhB,MAAO,CAAEG,eAAgB,gBAAiBc,UAAW,SACxD,wBACEjB,MAAO,CACLiB,UAAW,OACXC,WAAY,OACZC,YAAa,OACbC,SAAU,QACVC,gBAAiB,SAGnB,wDACA,4BACG,IADH,qFAKA,4BACG,IADH,oFAKA,4BACG,IADH,qFAKA,4BACG,IADH,oGC7JVC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.ac79d54a.chunk.js","sourcesContent":["import React, { useRef, useState, useCallback } from \"react\";\nimport produce from \"immer\";\n\nconst numRows = 30;\nconst numCols = 30;\n\nconst redundant = [\n  [0.1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nfunction App() {\n  const generateEmptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n  };\n\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const generateRandomStuff = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(\n        Array.from(Array(numCols), () => (Math.random() > 0.5 ? 1 : 0))\n      );\n    }\n    return rows;\n  };\n\n  const [Simulation, setSimulation] = useState(false);\n\n  const runningRef = useRef(Simulation);\n  runningRef.current = Simulation;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            redundant.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newK >= 0 && newI < numRows && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setSimulation(!Simulation);\n          if (!Simulation) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }}\n      >\n        {Simulation ? \"Stop\" : \"start\"} Simulation\n      </button>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\"\n        }}\n      >\n        <button\n          onClick={() => {\n            setGrid(generateEmptyGrid());\n          }}\n        >\n          Clear\n        </button>\n        <button\n          onClick={() => {\n            setGrid(generateRandomStuff());\n          }}\n        >\n          Random Stuff\n        </button>\n      </div>\n      <div\n        style={{\n          display: \"grid\",\n          justifyContent: \"center\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              className=\"table\"\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              key={`${i}-${k}`}\n              style={{\n                width: 15,\n                height: 15,\n                background: grid[i][k] ? \"#000\" : undefined\n              }}\n            ></div>\n          ))\n        )}\n      </div>\n      <div style={{ justifyContent: \"space-between\", textAlign: \"left\" }}>\n        <ul\n          style={{\n            textAlign: \"left\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            maxWidth: \"800px\",\n            backgroundColor: \"#000\"\n          }}\n        >\n          <h2>Game Of Life Transitions</h2>\n          <li>\n            {\" \"}\n            Any live cell with fewer than two live neighbours dies, as if by\n            underpopulation.\n          </li>\n          <li>\n            {\" \"}\n            Any live cell with two or three live neighbours lives on to the next\n            generation.\n          </li>\n          <li>\n            {\" \"}\n            Any live cell with more than three live neighbours dies, as if by\n            overpopulation.\n          </li>\n          <li>\n            {\" \"}\n            Any dead cell with exactly three live neighbours becomes a live\n            cell, as if by reproduction.\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}